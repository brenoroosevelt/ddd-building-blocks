<?php
declare(strict_types=1);

namespace BrenoRoosevelt\DDD\BuildingBlocks\Test;

use BrenoRoosevelt\DDD\BuildingBlocks\Application\Dispatcher;
use BrenoRoosevelt\DDD\BuildingBlocks\Domain\Support\Uuid;
use BrenoRoosevelt\DDD\BuildingBlocks\Sample\DeactivateUser;
use BrenoRoosevelt\DDD\BuildingBlocks\Sample\ChangeName;
use BrenoRoosevelt\DDD\BuildingBlocks\Sample\CreateUser;
use BrenoRoosevelt\DDD\BuildingBlocks\Sample\InMemoryUserRepository;
use BrenoRoosevelt\DDD\BuildingBlocks\Sample\User;
use BrenoRoosevelt\DDD\BuildingBlocks\Sample\UserRepository;
use Habemus\Container;
use OniBus\Handler\ClassMethod\ClassMethod;
use PHPUnit\Framework\TestCase;

class SampleTest extends TestCase
{
    private Container $container;
    private UserRepository $repository;

    public function setUp(): void
    {
        $this->container = new Container();
        $this->repository = new InMemoryUserRepository();
        $this->container->add(UserRepository::class, $this->repository);
        parent::setUp();
    }

    public function tearDown(): void
    {
        unset($this->container);
        unset($this->repository);
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function dispatcher(): Dispatcher
    {
        return
            new Dispatcher(
                $this->container,
                new ClassMethod(CreateUser::class, User::class, 'newUser'),
                new ClassMethod(ChangeName::class, User::class, 'changeName'),
                new ClassMethod(DeactivateUser::class, User::class, 'deactivate'),
            );
    }

    public function testCreateUser()
    {
        /** @var User $newUser */
        $newUser = $this->dispatcher()->dispatch(
            new CreateUser(['name' => 'fulano'])
        );

        $user = $this->repository->ofId($newUser->getId());
        $this->assertEquals('fulano', $user->name());
    }

    public function testChangeName()
    {
        $id = Uuid::new(InMemoryUserRepository::id);
        $this->dispatcher()->dispatch(
            new ChangeName(['id'=> (string) $id, 'name' => 'outro nome'])
        );

        $user = $this->repository->ofId($id);
        $this->assertEquals('outro nome', $user->name());
    }

    public function testDeactivateUser()
    {
        $id = Uuid::new(InMemoryUserRepository::id);
        $this->dispatcher()->dispatch(
            new DeactivateUser(['id'=> (string) $id])
        );

        $user = $this->repository->ofId($id);
        $this->assertFalse($user->isActive());
    }
}
