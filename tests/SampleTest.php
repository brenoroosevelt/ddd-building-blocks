<?php
declare(strict_types=1);

namespace BrenoRoosevelt\DDD\BuildingBlocks\Test;

use Attribute;
use BrenoRoosevelt\DDD\BuildingBlocks\Application\Dispatcher;
use BrenoRoosevelt\DDD\BuildingBlocks\Application\EventDispatcher;
use BrenoRoosevelt\DDD\BuildingBlocks\Domain\Attributes\Handler;
use BrenoRoosevelt\DDD\BuildingBlocks\Domain\Support\Uuid;
use BrenoRoosevelt\DDD\BuildingBlocks\Sample\DeactivateUser;
use BrenoRoosevelt\DDD\BuildingBlocks\Sample\ChangeName;
use BrenoRoosevelt\DDD\BuildingBlocks\Sample\CreateUser;
use BrenoRoosevelt\DDD\BuildingBlocks\Sample\InMemoryUserRepository;
use BrenoRoosevelt\DDD\BuildingBlocks\Sample\User;
use BrenoRoosevelt\DDD\BuildingBlocks\Sample\UserRepository;
use BrenoRoosevelt\DDD\BuildingBlocks\Sample\UserWasCreated;
use BrenoRoosevelt\PhpAttributes\AttributesFactory;
use BrenoRoosevelt\PhpAttributes\ParsedAttribute;
use FlexFqcnFinder\Fqcn;
use Habemus\Container;
use OniBus\Bus;
use OniBus\BusChain;
use OniBus\Handler\ClassMethod\ClassMethod;
use OniBus\Message;
use PHPUnit\Framework\TestCase;

class SampleTest extends TestCase
{
    private Container $container;
    private UserRepository $repository;

    private function handlers(): array
    {
        return [
            new ClassMethod(CreateUser::class, User::class, 'newUser'),
            new ClassMethod(ChangeName::class, User::class, 'changeName'),
            new ClassMethod(DeactivateUser::class, User::class, 'deactivate'),
            new ClassMethod(UserWasCreated::class, User::class, 'whenUserCreated'),
        ];
    }

    private function handlers2(): array
    {
        $handlers = (new AttributesFactory)->fromFqcnFinder(
            Fqcn::fromDir(__DIR__ . '/../src'),
            Attribute::TARGET_METHOD,
            Handler::class
        );

        return
            array_map(
                function (ParsedAttribute $parsedAttribute) {
                    /** @var Handler $handler */
                    $handler = $parsedAttribute->attribute()->newInstance();
                    $target = $parsedAttribute->target();
                    $message = $handler->message;
                    if (empty($handler->message)) {
                        foreach ($target->getParameters() as $parameter) {
                            if ($parameter->getType() instanceof \ReflectionNamedType) {
                                $typeHint = $parameter->getType()->getName();
                                if(is_subclass_of($typeHint, Message::class, true)) {
                                    $message = $typeHint;
                                    break;
                                }
                            }
                        }
                    }

                    return new ClassMethod(
                        $message,
                        $target->getDeclaringClass()->getName(),
                        $target->getName()
                    );
                },
                $handlers->toArray()
            );
    }

    public function setUp(): void
    {
        $this->container = new Container();
        $this->repository = new InMemoryUserRepository();
        $this->container->add(UserRepository::class, $this->repository);
        parent::setUp();
    }

    public function tearDown(): void
    {
        unset($this->container);
        unset($this->repository);
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function dispatcher(): Dispatcher
    {
        return
            new Dispatcher(
                $this->container,
                ...$this->handlers2()
            );
    }

    public function eventDispatcher(): EventDispatcher
    {
        return
            new EventDispatcher(
                $this->container,
                ...$this->handlers2()
            );
    }

    public function bus(): Bus
    {
        return new BusChain($this->eventDispatcher(), $this->dispatcher());
    }

    public function testCreateUser()
    {
        /** @var User $newUser */
        $newUser = $this->bus()->dispatch(
            new CreateUser(['name' => 'fulano'])
        );

        $user = $this->repository->ofId($newUser->getId());
        $this->assertEquals('fulano', $user->name());
    }

    public function testChangeName()
    {
        $id = Uuid::new(InMemoryUserRepository::id);
        $this->bus()->dispatch(
            new ChangeName(['userId'=> (string) $id, 'name' => 'outro nome'])
        );

        $user = $this->repository->ofId($id);
        $this->assertEquals('outro nome', $user->name());
    }

    public function testDeactivateUser()
    {
        $id = Uuid::new(InMemoryUserRepository::id);
        $this->bus()->dispatch(
            new DeactivateUser(['userId'=> (string) $id])
        );

        $user = $this->repository->ofId($id);
        $this->assertFalse($user->isActive());
    }
}
